from flask import Flask, request
from flask_cors import CORS
import requests

app = Flask(__name__)
CORS(app, resources={r"/send_telegram_notification": {"origins": ["chrome-extension://pnfhoobelgilgafgacdnmebgohgknkdg", "https://crypto-predictor-acr2.onrender.com"]}})

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '8176459174:AAHYP9fGzmGbnoUnmTplk7OxUGyeEuTqA5U'
# URL —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (Render)
SERVER_URL = 'https://crypto-predictor-acr2.onrender.com'

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞
@app.route('/webhook', methods=['POST'])
def webhook():
    update = request.json
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–º–∞–Ω–¥–∞ /start
    if 'message' in update and 'text' in update['message']:
        text = update['message']['text']
        chat_id = update['message']['chat']['id']
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start user123)
        if text.startswith('/start'):
            user_id = text.split()[1] if len(text.split()) > 1 else None
            if user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º user_id –∏ chat_id –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                response = requests.post(
                    f'{SERVER_URL}/subscribe_telegram',
                    params={'userId': user_id, 'chatId': chat_id}
                )
                if response.json().get('ok'):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
                    send_message(chat_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üéâ')
                else:
                    send_message(chat_id, '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            else:
                send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.')
    return 'OK', 200

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.route('/send_telegram_notification', methods=['POST'])
def send_telegram_notification():
    user_id = request.args.get('userId')
    message = request.args.get('message')
    lang = request.args.get('lang', 'ru')  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ä—É—Å—Å–∫–∏–π

    if not user_id or not message:
        return {'ok': False, 'message': 'Missing userId or message'}, 400

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    try:
        response = requests.get(f'{SERVER_URL}/get_chat_id', params={'userId': user_id})
        response.raise_for_status()
        data = response.json()
        if not data.get('ok'):
            return {'ok': False, 'message': 'User not subscribed'}, 404
        chat_id = data['chat_id']
    except requests.RequestException as e:
        return {'ok': False, 'message': f'Failed to fetch chat_id: {str(e)}'}, 500

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        if not data.get('ok'):
            return {'ok': False, 'message': data.get('description')}, 500
        return {'ok': True, 'message': 'Notification sent'}, 200
    except requests.RequestException as e:
        return {'ok': False, 'message': f'Failed to send Telegram message: {str(e)}'}, 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_message(chat_id, text):
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    requests.post(url, json=payload)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)